1.安装python3.6;
	python官网：https://www.python.org/downloads/

	            Windows x86-64 executable installer

2.安装python虚拟环境；
	1.pip install virtualenv   安装virtualenv

	2.virtualenv testvir       创建一个virtualenv， 名字为testvir

	3.进入testvir/Scripts 运行activate.bat:
		使用 pip list 查看当前虚拟环境中都安装了哪些库

	4.virtualenv 虚拟环境需要知道当前安装虚拟环境的目录，比较麻烦，可以使用
		pip install virtualenvwrapper-win   :windows命令
		pip install virtualenvwrapper   :Linux命令

	    虚拟环境目录变更：
	        新建环境变量：
	            变量名（N）：WORKON_HOME
	            变量值（V）：d:\djangoworkon
	        即把默认虚拟环境路径变为自定义的d:\djangoworkon 目录

	5.mkvirtualenv testvir2  :新建虚拟环境，新建完成后，直接进入testvir2 环境（virtualenv testvir新建完成后不能直接进入testvir环境，要运行testvir/Scripts 运行activate.bat才能进入testvir环境）

	6.deactivate :退出虚拟环境

	7.workon:查看当前有几个虚拟环境

	8.workon testvir2 :进入到testvir2虚拟环境



3.python虚拟环境中安装selenium；
	github地址：https://github.com/baijum/selenium-python
	使用说明地址：https://selenium-python.readthedocs.io/
	安装命令：pip install selenium

4.安装pycharm;
	安装教程：https://www.cnblogs.com/dcpeng/p/9031405.html
	pycharm官网：https://www.jetbrains.com/pycharm/
		     professional
	pycharm破解：https://www.cnblogs.com/mosson/p/10248395.html

5.使用pycharm新建一个python工程；

6.安装ddt:
    pip install ddt

7.介绍下unittest的基本使用方法：
    1.import unittest
    2.定义一个继承自unittest.TestCase的测试用例类
    3.定义setUp和tearDown，在每个测试用例前后做一些辅助工作。
    4.定义测试用例，名字以test开头。
    5.一个测试用例应该只测试一个方面，测试目的和测试内容应很明确。主要是调用assertEqual、assertRaises等断言方法判断程序执行结果和预期值是否相符。
    6.调用unittest.main()启动测试
    7.如果测试未通过，会输出相应的错误提示。如果测试全部通过则不显示任何东西，这时可以添加-v参数显示详细信息。

    8.相信刚接触Python的你一定有过如此经历，把所有的代码都写在 if __name__ == '__main__'下，因为有人告诉你，这样比较符合 Pythonista 的代码风格。
      殊不知这段代码的意义并不是一定要存在于执行代码中，而是在日常工作中，为了调试某个模块的正确性，我们往往会在当前模块下直接写一个 if __name__ == '__main__'，测试逻辑写在下面，
      这样，在其他模块调用这个模块里的方法也好，类也好的时候，就不会去调用 if __name__ == '__main__' 下面的逻辑了。
      原因很简单，因为 if __name__ == '__main__' 中的 __name__ 代表的就是当前执行的模块名。
      python一切皆对象，所以python的模块也是对象，他有一个 built-in module，叫 __name__，存储着模块是如何被执行的，如果是执行当前模块，那么就显示 __main__ ，
      如果是被引用进来的，就显示被引用的路径。

      if __name__ == '__main__':的运行原理：
         每个python模块（python文件，也就是此处的 test.py 和 import_test.py）都包含内置的变量 __name__，当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；
      如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（不包含后缀.py）。
         而“__main__” 始终指当前执行模块的名称（包含后缀.py）。进而当模块被直接执行时，__name__ == 'main' 结果为真。
         为了进一步说明，可以在中脚本的 if __name__=="__main__": 之前加入 print(__name__)，即将 __name__ 打印出来。

      if __name__ == '__main__'下的语只有在运行当前文件（模块）的时候才会被运行
